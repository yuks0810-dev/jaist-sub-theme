## Problem Index

解く順序：
- 資源配分問題 (LP)
- 輸送問題 (LP)
- ナップサック問題 (MIP)
- Nクイーン問題 (CP)
- ビンパッキング問題 (CP/MIP)
- 設備配置問題 (MIP)
- 要員スケジューリング (CP)
- 生産計画問題（セットアップ考慮）(MIP)
- 巡回セールスマン問題 (TSP) (MIP)
- スケジューリング問題 (Job Shop Scheduling) (CP)
- 配送計画問題 (VRP) (MIP)


**1. 線形計画問題 (Linear Programming - LP)**

*   **資源配分問題 (製品ミックス問題):**
    *   **シナリオ:** ある工場では、製品Aと製品Bを生産しています。生産には原材料Xと原材料Y、そして労働時間が必要です。利益を最大化するためには、各製品をどれだけ生産すべきでしょうか？
    *   **データ:**
        *   製品A: 1単位あたり利益5万円、原材料Xを2kg、原材料Yを1kg、労働時間を3時間必要とします。
        *   製品B: 1単位あたり利益4万円、原材料Xを1kg、原材料Yを2kg、労働時間を2時間必要とします。
        *   利用可能な資源: 原材料Xは最大100kg、原材料Yは最大80kg、労働時間は最大150時間。
    *   **目的:** 総利益 (5 * (製品Aの生産量) + 4 * (製品Bの生産量)) を最大化する。
    *   **制約:**
        *   原材料Xの使用量 <= 100 kg
        *   原材料Yの使用量 <= 80 kg
        *   総労働時間 <= 150 時間
        *   各製品の生産量は0以上。
    *   **解くソルバー:** CPLEX (単体法 or 内点法)

*   **輸送問題:**
    *   **シナリオ:** 2つの工場 (F1, F2) で製品を生産し、3つの倉庫 (W1, W2, W3) に輸送します。各工場から各倉庫への輸送コストが決まっており、工場の供給能力と倉庫の需要量が決まっています。総輸送コストを最小にする輸送計画を立ててください。
    *   **データ:**
        *   供給量: F1は50個、F2は60個
        *   需要量: W1は30個、W2は40個、W3は40個 (総供給=総需要)
        *   輸送コスト (1個あたり):
            *   F1 -> W1: 4円
            *   F1 -> W2: 6円
            *   F1 -> W3: 9円
            *   F2 -> W1: 5円
            *   F2 -> W2: 4円
            *   F2 -> W3: 7円
    *   **目的:** 総輸送コストを最小化する。
    *   **制約:**
        *   各工場からの総輸送量は、その工場の供給量以下（または等しい）。
        *   各倉庫への総輸送量は、その倉庫の需要量以上（または等しい）。
        *   各輸送量は0以上。
    *   **解くソルバー:** CPLEX (単体法 or 内点法, ネットワークフローに特化したアルゴリズムも効果的)

---

**2. 混合整数計画問題 (Mixed Integer Programming - MIP)**

*   **ナップサック問題 (0/1 Knapsack):**
    *   **シナリオ:** あなたは容量15kgのナップサックを持っています。いくつかの品物があり、それぞれの重さと価値が決まっています。ナップサックに入れる品物の合計価値が最大になるように、どの品物を選ぶべきでしょうか？各品物は1つしかなく、入れるか入れないかのどちらかです。
    *   **データ:**
        *   品物1: 重さ 12kg, 価値 4万円
        *   品物2: 重さ 2kg, 価値 2万円
        *   品物3: 重さ 1kg, 価値 1万円
        *   品物4: 重さ 1kg, 価値 2万円
        *   品物5: 重さ 4kg, 価値 10万円
    *   **目的:** ナップサックに入れた品物の合計価値を最大化する。
    *   **制約:**
        *   ナップサックに入れた品物の合計重量 <= 15kg。
        *   各品物は入れる(1)か入れない(0)かのどちらか (0/1変数)。
    *   **解くソルバー:** CPLEX (分枝限定法 / 分枝カット法)

*   **巡回セールスマン問題 (TSP):**
    *   **シナリオ:** セールスマンが本社(A)を出発し、3つの都市(B, C, D)をそれぞれ1回だけ訪問して、最後に本社(A)に戻ります。都市間の移動コスト（距離や時間）が分かっています。総移動コストが最小になる訪問順序を見つけてください。
    *   **データ:** 都市間の移動コスト（対称とする）
        *   A <-> B: 10
        *   A <-> C: 15
        *   A <-> D: 20
        *   B <-> C: 35
        *   B <-> D: 25
        *   C <-> D: 30
    *   **目的:** 総移動コストを最小化する。
    *   **制約:**
        *   各都市（本社含む）から出発する経路はちょうど1つ。
        *   各都市（本社含む）に到着する経路はちょうど1つ。
        *   部分的な閉路（例: A->B->Aで終わってしまうなど）を形成しない。(部分巡回路除去制約)
        *   経路を選択するかどうかは0/1変数。
    *   **解くソルバー:** CPLEX (分枝限定法 / 分枝カット法, TSP専用のカットやヒューリスティクスが使われる)

*   **設備配置問題 (Facility Location - Uncapacitated):**
    *   **シナリオ:** 2つの倉庫候補地 (L1, L2) と3つの顧客 (C1, C2, C3) があります。各候補地に倉庫を建設するには固定コストがかかります。各倉庫から各顧客へ商品を配送するコストも決まっています。どの候補地に倉庫を建設し、各顧客への配送をどの倉庫から行うのが、総コスト（建設コスト＋配送コスト）を最小にするでしょうか？
    *   **データ:**
        *   建設コスト: L1は1000万円, L2は1200万円
        *   配送コスト (顧客1人あたり):
            *   L1 -> C1: 50万円, L1 -> C2: 60万円, L1 -> C3: 40万円
            *   L2 -> C1: 70万円, L2 -> C2: 40万円, L2 -> C3: 50万円
    *   **目的:** 総コスト (選択された倉庫の建設コスト合計 + 全顧客への配送コスト合計) を最小化する。
    *   **制約:**
        *   各顧客は、建設された倉庫のうち、必ず1つの倉庫から供給を受けなければならない。
        *   倉庫を建設するかどうかは0/1変数。
        *   顧客iが倉庫jから供給を受けるかどうかの変数 (0/1変数 or 連続変数でもモデル化可能)。
    *   **解くソルバー:** CPLEX (分枝限定法 / 分枝カット法)

*   **配送計画問題 (VRP - Capacitated):**
    *   **シナリオ:** 1つのデポ(D)と3つの顧客(C1, C2, C3)がいます。各顧客は特定の量の荷物を必要としています。デポには2台の配送トラックがあり、それぞれ積載容量の上限があります。トラックはデポを出発し、割り当てられた顧客を訪問して荷物を届け、デポに戻ります。総走行距離を最小にする配送ルートを計画してください。
    *   **データ:**
        *   顧客需要量: C1=10個, C2=15個, C3=8個
        *   トラック容量: 各トラック20個まで
        *   地点間距離 (TSPの例のデータを使用)
    *   **目的:** 全トラックの総走行距離を最小化する。
    *   **制約:**
        *   各顧客は、ちょうど1台のトラックによって1回だけ訪問される。
        *   各トラックの配送ルートはデポから始まり、デポで終わる。
        *   各トラックのルートで訪問する顧客の需要量の合計は、トラックの容量を超えない。
        *   (部分巡回路除去制約も必要)
        *   どのトラックがどの経路を移動するかを示す0/1変数。
    *   **解くソルバー:** CPLEX (分枝限定法 / 分枝カット法, VRPに特化したカットやヒューリスティクスが重要)

*   **生産計画問題（セットアップ考慮）:**
    *   **シナリオ:** 1台の機械で2種類の製品 (P1, P2) を生産します。計画期間は3日間です。各日に生産できる総時間は限られています。製品を切り替える際には、セットアップ時間（とコスト）が発生します。各製品の日ごとの需要を満たしつつ、総コスト（生産コスト＋セットアップコスト）を最小化する生産計画を立ててください。
    *   **データ:**
        *   製品P1: 生産時間1時間/個, 生産コスト10円/個, 需要(Day1:5, Day2:0, Day3:10)
        *   製品P2: 生産時間2時間/個, 生産コスト15円/個, 需要(Day1:0, Day2:8, Day3:5)
        *   セットアップ: P1->P2 または P2->P1 に切り替える際に2時間、コスト50円発生。日の初めに生産する場合もセットアップが発生。
        *   利用可能時間: 各日8時間
    *   **目的:** 3日間の総コスト（生産コスト＋セットアップコスト）を最小化する。
    *   **制約:**
        *   各日の総生産時間＋セットアップ時間は、利用可能時間以下。
        *   各日の終わりまでに、その日までの累積需要を満たす必要がある。
        *   ある日に製品iを生産するかどうかを示す0/1変数。
        *   ある日に製品iから製品jへの切り替えが発生するかどうかを示す0/1変数。
        *   各日の各製品の生産量（整数変数）。
    *   **解くソルバー:** CPLEX (分枝限定法 / 分枝カット法)

---

**3. 制約プログラミング (Constraint Programming - CP)**

*   **スケジューリング問題 (Job Shop Scheduling):**
    *   **シナリオ:** 2つのジョブ (J1, J2) を2台の機械 (M1, M2) で処理します。各ジョブは特定の順序で機械を通過する必要があります。各工程の処理時間も決まっています。全てのジョブが完了するまでの時間（メイクスパン）を最小化してください。
    *   **データ:**
        *   J1: M1 (3時間) -> M2 (2時間)
        *   J2: M2 (2時間) -> M1 (4時間)
    *   **目的:** メイクスパン（最後のジョブが完了する時間）を最小化する。
    *   **制約:**
        *   各ジョブ内の工程順序は守らなければならない (先行制約)。
        *   各機械は同時に1つのジョブしか処理できない (資源制約/不重複制約)。
    *   **解くソルバー:** CP Optimizer (制約伝播と探索、`interval`変数と`noOverlap`制約などが有効)

*   **要員スケジューリング (Nurse Rostering - 簡単化):**
    *   **シナリオ:** 3人の看護師 (N1, N2, N3) がおり、週末2日間 (土, 日) の日勤(D)・夜勤(N)・休み(O) のシフトを割り当てます。各日、日勤と夜勤には最低1人が必要です。各看護師は2日間で最大1回まで夜勤ができます。できるだけ公平な割り当てを目指します（ここでは特定の目的関数は設定せず、実行可能な割り当てを見つける問題とします）。
    *   **目的:** (実行可能な割り当てを見つける)
    *   **制約:**
        *   土曜日の日勤 >= 1人, 土曜日の夜勤 >= 1人
        *   日曜日の日勤 >= 1人, 日曜日の夜勤 >= 1人
        *   各看護師は、土日のどちらか一方、または両方が休みでも良い。
        *   各看護師の2日間の夜勤回数 <= 1回。
        *   各看護師は各日に1つのシフト (D, N, O) が割り当てられる。
    *   **解くソルバー:** CP Optimizer (制約伝播と探索、`count`制約などが有効)

*   **ビンパッキング問題 (1D Bin Packing):**
    *   **シナリオ:** 容量が10の箱 (ビン) が複数あります。重さがそれぞれ 6, 6, 5, 4, 4 の5つの品物を、できるだけ少ない数の箱に詰め込みたい。
    *   **目的:** 使用する箱の数を最小化する。
    *   **制約:**
        *   各箱に入れられた品物の重さの合計は、箱の容量10を超えてはならない。
        *   全ての品物は、いずれか1つの箱に入れなければならない。
    *   **解くソルバー:** CP Optimizer (制約伝播と探索、`pack`制約などが有効) または CPLEX (MIPとしても定式化可能)

*   **配列問題 (N-Queens Problem - N=4):**
    *   **シナリオ:** 4x4のチェス盤に、4個のクイーンを互いに攻撃しあわないように配置してください。（クイーンは縦・横・斜めに他のクイーンを攻撃します）
    *   **目的:** (実行可能な配置を見つける)
    *   **制約:**
        *   各行にクイーンはちょうど1つ。
        *   各列にクイーンはちょうど1つ。
        *   各対角線上にクイーンは最大1つ。(これは `all_different` 制約を使って表現できる)
        *   変数: `Q[i]` を i行目のクイーンが置かれる列番号 (1から4) とする。
        *   制約の表現例: `all_different(Q)`, `all_different(Q[i] + i)`, `all_different(Q[i] - i)`
    *   **解くソルバー:** CP Optimizer (制約伝播と探索、特に`all_different`制約の強力な伝播が効果を発揮)
