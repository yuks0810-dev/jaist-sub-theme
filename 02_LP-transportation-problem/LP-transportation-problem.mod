/*********************************************
 * OPL 22.1.1.0 Model
 * Author: hiralab-NUC
 * Creation Date: 2025/04/27 at 12:44:38
 *********************************************/
 
/*********************************************
**輸送問題:**
*   **シナリオ:** 2つの工場 (F1, F2) で製品を生産し、3つの倉庫 (W1, W2, W3) に輸送します。各工場から各倉庫への輸送コストが決まっており、工場の供給能力と倉庫の需要量が決まっています。総輸送コストを最小にする輸送計画を立ててください。
*   **データ:**
    *   供給量: F1は50個、F2は60個
    *   需要量: W1は30個、W2は40個、W3は40個 (総供給=総需要)
    *   輸送コスト (1個あたり):
        *   F1 -> W1: 4円
        *   F1 -> W2: 6円
        *   F1 -> W3: 9円
        *   F2 -> W1: 5円
        *   F2 -> W2: 4円
        *   F2 -> W3: 7円
*   **目的:** 総輸送コストを最小化する。
*   **制約:**
    *   各工場からの総輸送量は、その工場の供給量以下（または等しい）。
    *   各倉庫への総輸送量は、その倉庫の需要量以上（または等しい）。
    *   各輸送量は0以上。
*   **解くソルバー:** CPLEX (単体法 or 内点法, ネットワークフローに特化したアルゴリズムも効果的)
 *********************************************/
 
/*********************************************
 * OPL モデル
 * 輸送問題
 *********************************************/

// --- データ宣言 ---

// 供給元 (工場) の集合
{string} Factories = ...;

// 需要先 (倉庫) の集合
{string} Warehouses = ...;

// 各工場の供給量
float supply[Factories] = ...;

// 各倉庫の需要量
float demand[Warehouses] = ...;

// 各工場から各倉庫への単位あたり輸送コスト
float cost[Factories][Warehouses] = ...;


// --- 決定変数宣言 ---

// 各工場から各倉庫への輸送量 (0以上の実数)
dvar float+ transport[Factories][Warehouses];


// --- 目的関数定義 ---

// 総輸送コストを最小化する
minimize
  sum( f in Factories, w in Warehouses ) cost[f][w] * transport[f][w];


// --- 制約条件定義 ---

subject to {
  // 供給制約: 各工場からの総輸送量は供給量以下(または等しい)
  forall( f in Factories ) {
    ctSupply:
      sum( w in Warehouses ) transport[f][w] <= supply[f];
  }

  // 需要制約: 各倉庫への総輸送量は需要量以上(または等しい)
  forall( w in Warehouses ) {
    ctDemand:
      sum( f in Factories ) transport[f][w] >= demand[w];
  }
}